name: CI CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APPLICATION_NAME: spring-boot-template

jobs:
  run-trivy-scan:
    name: Run trivy scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: fs
          format: sarif
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
  build-and-test-code:
    name: Build and test the code
    needs: [ run-trivy-scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven
      - name: Build and test code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          mvn -B clean verify
          -Pcoverage org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.projectKey=felix2000jp_spring-boot-template
          -Dsonar.organization=felix2000jp
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - name: Upload JAR file artifact
        uses: actions/upload-artifact@v4
        with:
          path: 'target/*.jar'
          name: ${{ env.APPLICATION_NAME }}
          if-no-files-found: error
  build-and-push-image:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Build and push the image
    needs: [ build-and-test-code ]
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APPLICATION_NAME }}
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to digital ocean registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
      - name: Generate metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DO_CONTAINER_REGISTRY }}/${{ env.APPLICATION_NAME }}
          tags: type=sha
        id: docker_meta
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64
          provenance: false
          build-args: APP_JAR=*.jar
  deploy-application:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Deploy the application
    needs: [ build-and-push-image ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup deploy env
        run: echo "Use this step to deploy your app if needed"