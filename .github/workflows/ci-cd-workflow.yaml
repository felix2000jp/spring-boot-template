name: CI/CD workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_NAME: ghcr.io
  APPLICATION_NAME: ${{ github.repository }}
  APP_JAR_ARTIFACT: app-jar-artifact

jobs:
  build-and-test-code:
    name: Build and test the code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven
      - name: Build and test code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          mvn -B clean verify
          -Pcoverage org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.projectKey=felix2000jp_spring-boot-template
          -Dsonar.organization=felix2000jp
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - name: Upload JAR file artifact
        uses: actions/upload-artifact@v4
        with:
          path: 'target/*.jar'
          name: ${{ env.APP_JAR_ARTIFACT }}
          if-no-files-found: error
  build-and-push-image:
    name: Build and push the image
    needs: [ build-and-test-code ]
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR file artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.APP_JAR_ARTIFACT }}
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate metadata
        uses: docker/metadata-action@v5
        id: docker_meta
        with:
          images: ${{ env.REGISTRY_NAME }}/${{ env.APPLICATION_NAME }}
          tags: |
            type=sha
            type=raw,value=latest
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: APP_JAR=*.jar
      - name: test
        run: ls -a
  deploy-application:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Deploy the application
    needs: [ build-and-push-image ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup deploy env
        run: echo "Use this step to deploy your app if needed"